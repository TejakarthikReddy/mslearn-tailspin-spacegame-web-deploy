trigger:
  - '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'Build'
    displayName: 'Build job'
    pool:
      name: 'karthik'  # Self-hosted agent pool name
      demands:
      - agent.name -equals teja  # Self-hosted agent name
    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '6.x'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - ${{ if eq(variables['Agent.OS'], 'Windows_NT') }}:
      - task: PowerShell@2
        displayName: 'Install Node.js on Windows'
        inputs:
          targetType: 'inline'
          script: |
            # Download the Node.js installer
            $installerPath = Join-Path $env:TEMP 'node-v20.10.0-x64.msi'
            Invoke-WebRequest 'https://nodejs.org/dist/v20.10.0/node-v20.10.0-x64.msi' -OutFile $installerPath

            # Install Node.js with elevated privileges
            $processStartInfo = New-Object System.Diagnostics.ProcessStartInfo
            $processStartInfo.FileName = $installerPath
            $processStartInfo.Arguments = '/quiet /norestart'
            $processStartInfo.UseShellExecute = $false
            $processStartInfo.Verb = 'runas'
            $process = [System.Diagnostics.Process]::Start($processStartInfo)
            $process.WaitForExit()

    - ${{ if eq(variables['Agent.OS'], 'Linux') }}:
      - script: |
          # Install Node.js on Linux
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
        displayName: 'Install Node.js on Linux'

    - ${{ if eq(variables['Agent.OS'], 'Darwin') }}:
      - script: |
          # Install Node.js on macOS
          brew install node@20
        displayName: 'Install Node.js on macOS'

    - task: Npm@1
      displayName: 'Install NPM packages'
      inputs:
        command: custom
        customCommand: 'install --no-optional --no-fund --no-progress --only=prod'
        customRegistry: 'useFeed'
        customFeed: 'npm-library'
        workingDir: client
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop
