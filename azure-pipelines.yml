trigger:
  - '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'Build'
    displayName: 'Build job'
    pool:
      name: 'karthik'  # Self-hosted agent pool name
      demands:
      - agent.name -equals teja  # Self-hosted agent name
    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '6.x'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: PowerShell@2
      displayName: 'Install Node.js on Windows'
      inputs:
        targetType: 'inline'
        script: |
          # Download the Node.js installer
          $installerPath = Join-Path $env:TEMP 'node-v20.10.0-x64.msi'
          Invoke-WebRequest 'https://nodejs.org/dist/v20.10.0/node-v20.10.0-x64.msi' -OutFile $installerPath
          
          # Verify the downloaded installer
          if (!(Test-Path $installerPath)) {
            Write-Error "Failed to download Node.js installer."
            exit 1
          }

          # Install Node.js with elevated privileges using Start-Process
          Start-Process msiexec.exe -ArgumentList "/i $installerPath /quiet /norestart" -Wait -NoNewWindow -PassThru

          # Install node-sass globally
          npm install -g node-sass
      condition: eq(variables['Agent.OS'], 'Windows_NT')

    - script: |
        # Install Node.js on Linux
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt-get install -y nodejs
      displayName: 'Install Node.js on Linux'
      condition: eq(variables['Agent.OS'], 'Linux')

    - script: |
        # Install Node.js on macOS
        brew install node@20
      displayName: 'Install Node.js on macOS'
      condition: eq(variables['Agent.OS'], 'Darwin')

    - task: Npm@1
      displayName: 'Install NPM packages'
      inputs:
        command: custom
        customCommand: 'install --no-optional --no-fund --no-progress --only=prod'
        customRegistry: 'useFeed'
        customFeed: 'npm-library'
        workingDir: '.'  # Install packages in the working directory
        verbose: false

    - task: CmdLine@2
      displayName: 'Compile Sass assets'
      inputs:
        script: |
          echo "Operating System: %AGENT.OS%"
          set "NODEJS_ROOT_DIR=C:\Program Files\nodejs"  # Replace with actual Node.js installation path
          echo "Node.js root directory: %NODEJS_ROOT_DIR%"
          if exist "%NODEJS_ROOT_DIR%\node_modules\node-sass\bin\node-sass.cmd" (
            "%NODEJS_ROOT_DIR%\node_modules\node-sass\bin\node-sass.cmd" "%wwwrootDir%" --output "%wwwrootDir%"
          ) else (
            echo "Node-sass executable not found, trying with npx"
            npx node-sass "%wwwrootDir%" --output "%wwwrootDir%"
          )
      condition: eq(variables['Agent.OS'], 'Windows_NT')

    - script: |
        npx node-sass "%wwwrootDir%" --output "%wwwrootDir%"
      displayName: 'Compile Sass assets on non-Windows'
      condition: ne(variables['Agent.OS'], 'Windows_NT')

    - task: gulp@1
      displayName: 'Run gulp tasks'
      inputs:
        gulpFile: '$(System.DefaultWorkingDirectory)/_work/1/s/gulpfile.js'
        targets: 'build'
        arguments: '--verbose'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop
